package js

import (
	"os"
	"path/filepath"
)

const vivardFileName = "vivard.ts"

func (cg *GQLCLientGenerator) GenerateVivard() (err error) {
	if cg.vivardGenerated {
		return
	}
	p := filepath.Join(cg.getOutputDir(), vivardFileName)
	outFile, err := os.Create(p)
	if err != nil {
		return
	}
	defer outFile.Close()
	outFile.WriteString(vivardFileContent)

	cg.vivardGenerated = true
	return nil
}

var vivardFileContent = `
/*Code generated by vivgen. DO NOT EDIT.*/

export function removeGQLPrefix(message: string): string {
    const gqlErrPrefix = "GraphQL error: ";
    const idx = message.indexOf(gqlErrPrefix);
    if(idx != -1) {
        return message.substring(gqlErrPrefix.length);
    }
    return message;
}

export function ParseGQLError(exception: any): string {
	let gqe = exception as {message: string}[];
    
    if(gqe && gqe[0] && gqe[0].message) {
        return removeGQLPrefix(gqe[0].message);
    } else if(typeof exception == "string")
        return exception;
    else if(typeof exception == "object" && exception.message) {
        return removeGQLPrefix(exception.message);
    }
    else {
        console.error("can not get problem description from object: ", exception)
        return "Problema...";
    }
}

export class ValidatorBase {
    constructor(public errors: {[key:string]: string|string[]}) {
    }

  setFromServerResponse(response: any): boolean {
    this.reset();
    const err = ParseGQLError(response);
    const validateVerb = "validate: ";
    let idx = err.indexOf(validateVerb);
    if(idx != -1) {
      const start = idx + validateVerb.length;
      idx = err.indexOf(":", start);
      if(idx > start) {
        const field = err.substring(start, start+1).toLowerCase() + err.substring(start+1, idx);
        if(field in this.errors) {
          this.errors[field] = err.substring(idx + 1);
          return true;
        }
      }
    }
    return false;
  }

  reset() {
    if(this.errors) {
      for (let err in this.errors)
        this.errors[err] = [];
    }
  }
}
`
