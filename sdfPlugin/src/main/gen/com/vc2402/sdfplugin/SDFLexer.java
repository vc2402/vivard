/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.vc2402.sdfplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.vc2402.sdfplugin.psi.Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>sdf.flex</tt>
 */
class SDFLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\14\100\1\300\u0100\100");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\176\3\1\5");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\1\65\10\0\1\64\1\2\2\63\1\2\22\0\1\63\1\62\1\47\1\11\1\41\3\0\1\51\1\52\2"+
    "\0\1\61\1\34\1\35\1\1\12\40\1\42\1\36\1\57\1\46\1\60\1\0\1\43\3\37\1\3\4\37"+
    "\1\7\3\37\1\5\15\37\1\53\1\50\1\54\1\0\1\6\1\0\1\13\1\26\1\14\1\10\1\17\1"+
    "\31\1\16\1\44\1\32\1\37\1\15\1\33\1\25\1\23\1\30\1\12\1\37\1\27\1\24\1\20"+
    "\1\4\1\45\1\37\1\22\1\21\1\37\1\55\1\0\1\56\7\0\1\63\240\0\1\66\1\0\2\63\125"+
    "\0\1\67");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\3\3\1\4\15\3\1\5\1\6"+
    "\1\5\1\1\1\7\1\1\1\10\1\1\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\4\1\23\1\3\1\0\24\3\1\24\2\3\1\5"+
    "\1\25\5\0\1\26\1\0\1\3\1\27\16\3\1\30"+
    "\6\3\1\31\1\3\1\32\10\0\1\3\1\33\7\3"+
    "\1\34\1\35\3\3\1\36\1\37\2\0\2\3\1\25"+
    "\3\0\1\40\3\0\14\3\2\0\1\41\1\3\5\0"+
    "\1\42\4\3\1\43\3\3\1\44\1\3\4\0\1\40"+
    "\1\0\1\3\1\45\3\3\1\46\3\3\3\0\3\3"+
    "\3\0\2\3\7\0\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\70\0\u04d0"+
    "\0\u0508\0\70\0\u0540\0\70\0\u0578\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u05b0"+
    "\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0118"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0578\0\70\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u0118\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u0118\0\u11b8\0\u04d0\0\u11f0\0\u1228\0\u1260"+
    "\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u0118\0\u13e8"+
    "\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u0118\0\u0118"+
    "\0\u1570\0\u15a8\0\u15e0\0\u0118\0\u0118\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08"+
    "\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u0118"+
    "\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u0118\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u1dc0\0\u0118\0\u1df8\0\u1e30\0\u1e68\0\u0118"+
    "\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u0118\0\u2060\0\u2098\0\u20d0\0\u0118\0\u2108\0\u2140\0\u2178"+
    "\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338"+
    "\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8"+
    "\0\u2530\0\u2568\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\4\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\6\1\14\1\15\3\6\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\1\27\1\6\1\30\1\31\1\32\1\33\2\6\1\34"+
    "\1\35\1\2\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\4\1\50\3\2\71\0"+
    "\1\51\70\0\1\4\60\0\2\4\6\0\1\6\1\52"+
    "\4\6\1\0\22\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\22\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\1\6\1\54"+
    "\16\6\1\55\1\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\22\0\2\10\1\0\65\10\3\0\6\6\1\0"+
    "\1\6\1\56\20\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\1\6\1\57\4\6\1\0\14\6\1\60"+
    "\5\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\1\6\1\61\14\6\1\62\3\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\10\6\1\63\2\6\1\64\6\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\7\6\1\65"+
    "\5\6\1\66\4\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\6\6\1\67\11\6\1\70"+
    "\1\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\1\6\1\71\3\6\1\72\14\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\16\6\1\73\3\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\5\6\1\74\14\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\11\6\1\75\10\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\1\6\1\76\17\6\1\77"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\25\0\5\6"+
    "\1\100\1\0\11\6\1\101\10\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\16\6\1\102"+
    "\3\6\1\0\1\53\1\0\2\6\3\0\2\6\57\0"+
    "\1\103\2\0\1\30\64\0\1\30\2\0\1\30\32\0"+
    "\6\104\1\0\22\104\3\0\1\104\4\0\2\104\36\0"+
    "\1\105\3\0\1\106\3\0\1\107\2\0\1\110\40\0"+
    "\47\111\1\112\1\113\17\111\2\10\1\4\60\10\2\50"+
    "\3\10\2\51\1\0\65\51\3\0\2\6\1\114\3\6"+
    "\1\0\22\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\115\1\0\22\115\3\0\1\115\4\0\2\115"+
    "\25\0\6\6\1\0\6\6\1\116\13\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\2\6"+
    "\1\117\17\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\6\1\0\2\6\1\120\17\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\6\6"+
    "\1\121\13\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\6\1\0\12\6\1\122\7\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\21\6"+
    "\1\123\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\11\6\1\124\10\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\6\6\1\125"+
    "\13\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\14\6\1\126\5\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\1\127\21\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\25\0\1\6"+
    "\1\130\4\6\1\0\1\6\1\131\20\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\15\6"+
    "\1\132\4\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\6\1\0\11\6\1\133\10\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\1\134"+
    "\21\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\6\6\1\135\13\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\16\6\1\136"+
    "\3\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\17\6\1\137\2\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\5\6\1\140"+
    "\14\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\21\6\1\141\1\0\1\53\1\0\2\6"+
    "\3\0\2\6\25\0\6\6\1\0\16\6\1\142\3\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\25\0\6\6"+
    "\1\0\6\6\1\143\13\6\1\0\1\53\1\0\2\6"+
    "\3\0\2\6\25\0\6\6\1\0\16\6\1\144\3\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\57\0\1\145"+
    "\2\0\1\30\32\0\6\104\1\0\23\104\2\0\2\104"+
    "\1\0\1\146\1\0\2\104\51\0\1\147\14\0\1\150"+
    "\55\0\1\151\54\0\1\152\1\153\66\0\1\154\135\0"+
    "\1\155\5\0\3\6\1\156\2\6\1\0\22\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\115\1\0"+
    "\22\115\3\0\2\115\3\0\2\115\25\0\6\6\1\0"+
    "\5\6\1\157\14\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\6\6\1\160\13\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\3\6\1\161\16\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\16\6\1\100\3\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\6\6\1\162\13\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\2\6\1\163\17\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\17\6\1\164\2\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\5\6\1\165\14\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\5\6\1\166\14\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\5\6\1\167\14\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\5\6\1\170\14\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\11\6\1\171\10\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\20\6\1\172\1\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\4\6\1\173\15\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\1\6\1\174\20\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\21\6\1\175\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\22\6"+
    "\1\176\1\53\1\0\2\6\3\0\2\6\25\0\6\6"+
    "\1\0\22\6\1\177\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\6\1\0\12\6\1\130\7\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\1\6"+
    "\1\200\20\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\6\1\0\3\6\1\201\16\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\202\1\0\22\202"+
    "\3\0\1\202\4\0\2\202\41\0\1\203\63\0\1\204"+
    "\101\0\1\205\62\0\1\206\62\0\1\207\100\0\1\210"+
    "\131\0\1\211\4\0\4\6\1\212\1\6\1\0\22\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\25\0\6\6"+
    "\1\0\20\6\1\213\1\6\1\0\1\53\1\0\2\6"+
    "\3\0\2\6\25\0\6\6\1\0\1\6\1\214\20\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\25\0\6\6"+
    "\1\0\15\6\1\215\4\6\1\0\1\53\1\0\2\6"+
    "\3\0\2\6\25\0\1\6\1\216\4\6\1\0\22\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\25\0\6\6"+
    "\1\0\20\6\1\217\1\6\1\0\1\53\1\0\2\6"+
    "\3\0\2\6\25\0\6\6\1\0\11\6\1\220\3\6"+
    "\1\221\4\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\5\6\1\222\1\0\22\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\12\6\1\223"+
    "\7\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\11\6\1\224\10\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\21\6\1\225"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\41\0\1\226"+
    "\70\0\1\227\52\0\6\6\1\0\6\6\1\230\13\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\25\0\1\6"+
    "\1\231\4\6\1\0\22\6\1\0\1\53\1\0\2\6"+
    "\3\0\2\6\25\0\6\202\1\0\23\202\2\0\2\202"+
    "\3\0\2\202\35\0\1\232\77\0\1\233\63\0\1\234"+
    "\112\0\1\235\54\0\1\152\70\0\1\236\126\0\1\111"+
    "\3\0\5\6\1\237\1\0\22\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\16\6\1\240"+
    "\3\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\4\6\1\241\15\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\1\6\1\242"+
    "\20\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\21\6\1\243\1\0\1\53\1\0\2\6"+
    "\3\0\2\6\25\0\6\6\1\0\4\6\1\244\15\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\25\0\5\6"+
    "\1\245\1\0\22\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\11\6\1\244\10\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\5\6\1\246"+
    "\1\0\22\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\6\1\0\20\6\1\247\1\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\4\6"+
    "\1\250\15\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\6\1\0\5\6\1\251\14\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\47\0\1\252\72\0\1\253"+
    "\42\0\6\6\1\0\1\100\21\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\42\0\1\254\65\0\1\254\117\0"+
    "\1\255\24\0\6\256\1\0\22\256\3\0\1\256\4\0"+
    "\2\256\55\0\1\257\37\0\6\6\1\0\11\6\1\260"+
    "\10\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\5\6\1\261\14\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\2\6\1\262"+
    "\17\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\1\6\1\263\20\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\1\6\1\264"+
    "\10\6\1\265\7\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\1\6\1\264\3\6\1\266"+
    "\14\6\1\0\1\53\1\0\2\6\3\0\2\6\25\0"+
    "\6\6\1\0\5\6\1\267\14\6\1\0\1\53\1\0"+
    "\2\6\3\0\2\6\25\0\6\6\1\0\6\6\1\270"+
    "\13\6\1\0\1\53\1\0\2\6\3\0\2\6\50\0"+
    "\1\271\75\0\1\272\52\0\1\206\117\0\1\273\23\0"+
    "\6\256\1\0\22\256\3\0\2\256\3\0\2\256\67\0"+
    "\1\254\25\0\6\6\1\0\1\6\1\274\20\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\6\6\1\244\13\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\6\6\1\275\13\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\14\6\1\276\5\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\5\6\1\100\1\0\22\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\25\0\6\6\1\0\11\6"+
    "\1\262\10\6\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\25\0\6\6\1\0\16\6\1\221\3\6\1\0\1\53"+
    "\1\0\2\6\3\0\2\6\41\0\1\277\75\0\1\300"+
    "\42\0\47\273\1\206\1\301\17\273\3\0\6\6\1\0"+
    "\15\6\1\302\4\6\1\0\1\53\1\0\2\6\3\0"+
    "\2\6\25\0\6\6\1\0\5\6\1\266\14\6\1\0"+
    "\1\53\1\0\2\6\3\0\2\6\25\0\6\6\1\0"+
    "\21\6\1\303\1\0\1\53\1\0\2\6\3\0\2\6"+
    "\32\0\1\304\72\0\1\305\141\0\1\306\5\0\6\6"+
    "\1\0\7\6\1\244\12\6\1\0\1\53\1\0\2\6"+
    "\3\0\2\6\25\0\6\6\1\0\5\6\1\244\14\6"+
    "\1\0\1\53\1\0\2\6\3\0\2\6\32\0\1\307"+
    "\102\0\1\310\132\0\1\311\20\0\1\312\71\0\1\313"+
    "\135\0\1\273\10\0\1\313\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\12\11\3\1\1\0\31\1\5\0\1\11\1\0"+
    "\32\1\10\0\20\1\2\0\3\1\3\0\1\1\3\0"+
    "\14\1\2\0\2\1\5\0\13\1\4\0\1\1\1\0"+
    "\11\1\3\0\3\1\3\0\2\1\7\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SDFLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 39: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 3: 
            { yybegin(YYINITIAL); return Types.IDENTIFIER;
            } 
            // fall through
          case 41: break;
          case 4: 
            { yybegin(YYINITIAL); return Types.META_LINE;
            } 
            // fall through
          case 42: break;
          case 5: 
            { yybegin(YYINITIAL); return Types.NUMBER_VALUE;
            } 
            // fall through
          case 43: break;
          case 6: 
            { yybegin(YYINITIAL); return Types.STATEMENT_END;
            } 
            // fall through
          case 44: break;
          case 7: 
            { yybegin(YYINITIAL); return Types.SEMI;
            } 
            // fall through
          case 45: break;
          case 8: 
            { yybegin(YYINITIAL); return Types.EQUAL;
            } 
            // fall through
          case 46: break;
          case 9: 
            { yybegin(YYINITIAL); return Types.BR_OPEN;
            } 
            // fall through
          case 47: break;
          case 10: 
            { yybegin(YYINITIAL); return Types.BR_CLOSE;
            } 
            // fall through
          case 48: break;
          case 11: 
            { yybegin(YYINITIAL); return Types.BRACKETOPEN;
            } 
            // fall through
          case 49: break;
          case 12: 
            { yybegin(YYINITIAL); return Types.BRACKETCLOSE;
            } 
            // fall through
          case 50: break;
          case 13: 
            { yybegin(YYINITIAL); return Types.BRACESOPEN;
            } 
            // fall through
          case 51: break;
          case 14: 
            { yybegin(YYINITIAL); return Types.BRACESCLOSE;
            } 
            // fall through
          case 52: break;
          case 15: 
            { yybegin(YYINITIAL); return Types.MODIFIEROPEN;
            } 
            // fall through
          case 53: break;
          case 16: 
            { yybegin(YYINITIAL); return Types.MODIFIERCLOSE;
            } 
            // fall through
          case 54: break;
          case 17: 
            { yybegin(YYINITIAL); return Types.COMMA;
            } 
            // fall through
          case 55: break;
          case 18: 
            { yybegin(YYINITIAL); return Types.NOTNULL;
            } 
            // fall through
          case 56: break;
          case 19: 
            { yybegin(YYINITIAL); return Types.COMMENT_LINE;
            } 
            // fall through
          case 57: break;
          case 20: 
            { yybegin(YYINITIAL); return Types.ATTRMODIFIER;
            } 
            // fall through
          case 58: break;
          case 21: 
            { yybegin(YYINITIAL); return Types.ANNOTATIONTAG;
            } 
            // fall through
          case 59: break;
          case 22: 
            { yybegin(YYINITIAL); return Types.STRING_VALUE;
            } 
            // fall through
          case 60: break;
          case 23: 
            { yybegin(YYINITIAL); return Types.QUALIFIEDNAME;
            } 
            // fall through
          case 61: break;
          case 24: 
            { yybegin(YYINITIAL); return Types.MAP;
            } 
            // fall through
          case 62: break;
          case 25: 
            { yybegin(YYINITIAL); return Types.INT;
            } 
            // fall through
          case 63: break;
          case 26: 
            { yybegin(YYINITIAL); return Types.MORE;
            } 
            // fall through
          case 64: break;
          case 27: 
            { yybegin(YYINITIAL); return Types.DATE;
            } 
            // fall through
          case 65: break;
          case 28: 
            { yybegin(YYINITIAL); return Types.KW_TYPE;
            } 
            // fall through
          case 66: break;
          case 29: 
            { yybegin(YYINITIAL); return Types.BOOL_VALUE;
            } 
            // fall through
          case 67: break;
          case 30: 
            { yybegin(YYINITIAL); return Types.META;
            } 
            // fall through
          case 68: break;
          case 31: 
            { yybegin(YYINITIAL); return Types.BOOL;
            } 
            // fall through
          case 69: break;
          case 32: 
            { yybegin(YYINITIAL); return Types.HOOKTAG;
            } 
            // fall through
          case 70: break;
          case 33: 
            { yybegin(YYINITIAL); return Types.FLOAT;
            } 
            // fall through
          case 71: break;
          case 34: 
            { yybegin(YYINITIAL); return Types.DUMMYIDENTIFIER;
            } 
            // fall through
          case 72: break;
          case 35: 
            { yybegin(YYINITIAL); return Types.TYPEMODIFIER;
            } 
            // fall through
          case 73: break;
          case 36: 
            { yybegin(YYINITIAL); return Types.STRING;
            } 
            // fall through
          case 74: break;
          case 37: 
            { yybegin(YYINITIAL); return Types.PACKAGE;
            } 
            // fall through
          case 75: break;
          case 38: 
            { yybegin(YYINITIAL); return Types.EXTENDS;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
